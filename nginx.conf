user  demo;
worker_processes  auto;
worker_cpu_affinity auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  error;

pid        logs/nginx.pid;

worker_rlimit_nofile 65535;

events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  resp_main  '$remote_addr ^# $remote_user ^# $time_local ^# $request ^# '
                           '$status ^# $body_bytes_sent ^# $http_referer ^# '
                           '$http_user_agent ^# $http_x_forwarded_for ^# $request_body ^# '
                           '$resp_body';

    #access_log  logs/access.log  main;
    #access_log off;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_package_path 'lua/?.lua;/opt/openresty/nginx/lua_ad/?.lua;;';

    lua_shared_dict cache_ngx 128m;
    lua_shared_dict my_locks 100k;

    lua_shared_dict cache_ad 128m;
    lua_shared_dict locks_ad 100k;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location /hello {
            hello;
        }

        location /helloworld {
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }

        location /mixed {
            set_by_lua $a 'ngx.log(ngx.INFO, "set_by_lua")';
            rewrite_by_lua 'ngx.log(ngx.INFO, "rewrite_by_lua")';
            access_by_lua 'ngx.log(ngx.INFO, "access_by_lua")';
            header_filter_by_lua 'ngx.log(ngx.INFO, "header_filter_by_lua")';
            body_filter_by_lua 'ngx.log(ngx.INFO, "body_filter_by_lua")';
            log_by_lua 'ngx.log(ngx.INFO, "log_by_lua")';
            content_by_lua 'ngx.log(ngx.INFO, "content_by_lua")';
        }

        location /ngx_ctx {
            rewrite_by_lua '
                ngx.ctx.foo = 76
            ';
            access_by_lua '
                ngx.ctx.foo = ngx.ctx.foo + 3
            ';
            content_by_lua_block {
                ngx.say(ngx.ctx.foo)
            }
        }

        location /mysql_create {
            content_by_lua_file lua/mysql_create.lua;
        }

        location /mysql_insert {
            content_by_lua_file lua/mysql_insert.lua;
        }

        location /mysql_select {
            content_by_lua_file lua/mysql_select.lua;
        }

        location /redis_set {
            content_by_lua_file lua/redis_set.lua;
        }

        location /redis_get {
            content_by_lua_file lua/redis_get.lua;
        }

        location /iredis_get {
            content_by_lua_file lua/iredis_get.lua;
        }

        location /iredis_get2 {
            content_by_lua_file lua/iredis_get2.lua;
        }

        location /iredis_get3 {
            content_by_lua_file lua/iredis_get3.lua;
        }

        location /adbid {
            set_by_lua_block $resp_body { return "" }

            content_by_lua_file lua_ad/adbid.lua;

            body_filter_by_lua_block {
                local resp_body = ngx.arg[1]
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
                if ngx.arg[2] then
                    ngx.var.resp_body = ngx.ctx.buffered
                end
            }

            access_log  logs/bid_access.log  resp_main;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://128.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
