OpenResty

0.	学习网址
	https://openresty.org/en/
	https://www.nginx.com/resources/wiki/modules/lua/
	https://github.com/Iresty/nginx-lua-module-zh-wiki
	

1.	安装
	https://openresty.org/en/installation.html
	依赖安装
	sudo apt-get install libreadline-dev libncurses5-dev libpcre3-dev ibssl-dev perl make build-essential
	解压
	tar zxvf openresty-1.9.15.1.tar.gz
	cd openresty-1.9.15.1/
	
	./configure --help 查看组件
	https://openresty.org/en/components.html
	
	./configure --prefix=/opt/openresty --with-luajit --with-http_iconv_module -j2
	
	make -j2
	
	sudo make install
	
	将/opt/openresty/nginx/sbin加到环境变量
	

2.	命令
	nginx -t
	nginx -V
	nginx -s reload
	nginx -s stop
	
	查看启动是否成功
	curl http://127.0.0.1 
	

3.	nginx c module
	./configure --prefix=/opt/openresty --add-module=/demo/hello --with-luajit --with-http_iconv_module -j2
	make -j2
	sudo make install
	
	curl http://127.0.0.1/hello


4.	配置
    /proc/sys/fs/nr_open > /proc/sys/fs/file-max >= ulimit -Hn >= ulimit -Sn
	系统文件系统支持文件句柄总数上限
	cat /proc/sys/fs/nr_open
	
	系统文件系统支持文件句柄总数最大值
	cat /proc/sys/fs/file-max
	
	修改/etc/sysctl.conf   fs.file-max=
	sysctl -p
	
	查看当前系统使用的打开文件描述符数命令
	cat /proc/sys/fs/file-nr
	
	进程最大打开文件描述符数
	/etc/security/limits.conf
	* soft nofile 100000
	* hard nofile 100000
	重启生效
	ulimit -a
	

5.	ngx_lua
	1)	helloworld
	location /helloworld {
		content_by_lua_block {
			ngx.say("HelloWorld")
		}    
	}        
	
	curl http://127.0.0.1/helloworld
	ab -n 200000 -c 100 -k http://127.0.0.1/helloworld
	ab -n 200000 -c 100 -k http://127.0.0.1/hello
	
	
	2)	执行阶段
	location /mixed {
		set_by_lua $a 'ngx.log(ngx.ERR, "set_by_lua")';
		rewrite_by_lua 'ngx.log(ngx.ERR, "rewrite_by_lua")';
		access_by_lua 'ngx.log(ngx.ERR, "access_by_lua")';
		header_filter_by_lua 'ngx.log(ngx.ERR, "header_filter_by_lua")';
		body_filter_by_lua 'ngx.log(ngx.ERR, "body_filter_by_lua")';
		log_by_lua 'ngx.log(ngx.ERR, "log_by_lua")';
		content_by_lua 'ngx.log(ngx.ERR, "content_by_lua")';
	}
	
	curl http://127.0.0.1/mixed
	
	阶段间传递值
	ngx.ctx
	location /ngx_ctx {
		rewrite_by_lua '
			ngx.ctx.foo = 76
		';
		access_by_lua '
			ngx.ctx.foo = ngx.ctx.foo + 3
		';
		content_by_lua_block {
			ngx.say(ngx.ctx.foo)
		}
	}
	
	curl http://127.0.0.1/ngx_ctx
	
	3)	mysql
	location /mysql_test {                  
		content_by_lua_file lua/mysql_test.lua; 
	} 
	curl http://127.0.0.1/mysql_test
											
	location /mysql_select {                
		content_by_lua_file lua/mysql_select.lua;
	}                                       
	curl http://127.0.0.1/mysql_select
	
	ab -n 100000 -c 100 -k http://127.0.0.1/mysql_select
	
	
	4)	redis
	lua_package_path 'lua/?.lua;;';
	
	location /redis_set {
		content_by_lua_file lua/redis_set.lua;
	}   

	location /redis_get {
		content_by_lua_file lua/redis_get.lua;
	}
	
	
	curl http://127.0.0.1/redis_set
	curl http://127.0.0.1/redis_get
	
	ab -n 100000 -c 100 -k http://127.0.0.1/redis_set
	ab -n 100000 -c 100 -k http://127.0.0.1/redis_get
	
	
	5)	缓存
	进程间
	shared_dict
	lua_shared_dict cache_ngx 128m;
	location /iredis_get2 {
		content_by_lua_file lua/iredis_get2.lua;
	}
	
	ab -n 150000 -c 100 -k http://127.0.0.1/iredis_get
	ab -n 150000 -c 100 -k http://127.0.0.1/iredis_get2
	
	进程内
	lrucache
	
	缓存失效风暴
	加锁lua-resty-lock
	
	6)	api
	location ~ ^/api/([-_a-zA-Z0-9/]+) {
		access_by_lua_file lua/access_check.lua;
		content_by_lua_file lua/$1.lua;
	}
	
	curl "http://127.0.0.1/api/subtraction?a=1&b=2"
	curl "http://127.0.0.1/api/subtraction?a=1&b=v"
	
	
	
	

	
